.TH ORB2RRD 1 "$Date$"
.SH NAME
orb2rrdc \- populate a round-robin database from an orbserver
.SH SYNOPSIS
.nf
orb2rrdc [-vV] [-d cachedaemon] [-s statefile] [-p pffile] [-m match] 
        [-r reject] [-f from] orb dbcache
.fi
.SH DESCRIPTION
orb2rrdc enters state-of-health information from an Antelope orbserver 
into a round-robin database using \fIrrdtool(1)\fP. Every round-robin-database (rrd)
file constructed is entered into the \fIrrdcache\fP table of a caching 
database (this table is an extension of the css3.0 schema). The orb2rrdc.pf
parameter file governs the variables which are extracted from the status 
packets, as well as the pathnames for the generated RRD files, the types 
of RRD variables used (see \fIrrdtool(1)\fP), and the types of round-robin
archives that are stored (see \fIrrdtool(1)\fP).

The parameter file allows the user to specify a default network for the incoming 
status packets, should they be from an application 
that does not use the \fIsta_chan\fP form for \fIdls\fP array entries. 

.SH OPTIONS
.IP "-d cachedaemon" 
If this option is given, the \fIupdate\fP commands issued to rrdtool(1) 
include an argument --daemon=\fIcachedaemon\fP, intended to direct actual file 
updates through the rrdcached(1) program. See the man-page for rrdcached(1) for 
further information. The rrdcached daemon is assumed to be already running. 

.IP "-s statefile"
Specify a state-file to use for tracking and synchronizing the current 
read position in the orb.

.IP "-f from"
Specify a starting position for reading the orb stream. This may be 
a string time interpretable by str2epoch(3), or the string \fInewest\fP or
\fIoldest\fP. To avoid confusion, the \fI-f\fP argument is ignored if the \fI-s\fP 
option is also given (i.e. if a statefile is used). 


.IP "-m match"
Specify a regular-expression subset of orb source-names to monitor. 
The default is .*/pf/st.

.IP "-r reject"
Specify a regular-expression subset of orb source-names to reject.
The default is NULL.

.IP "-p pffile"
Specify a parameter file other than the default orb2rrdc.pf

.IP -v 
Verbose

.IP -V
Very Verbose
.SH PARAMETER FILE
.SS Parameters
.IP default_network
The \fIrrdcache\fP database table uses the seismic \fInet\fP name as one of the keys to uniquely identify each RRD 
database file. If this \fInet\fP name cannot be derived from an incoming parameter-file of status information, 
the value of \fInet\fP specified by this \fIdefault_network\fP parameter is assigned. 
.IP dls_vars
The \fIdls_vars\fP table specifies the variables from each incoming parameter-file packet of status information that
should be archived in RRD databases. Each table row consists of three (or more) elements separated by spaces. 
The first element is the name of the status variable to archive. The second element is a string of data-source parameters 
(rrdtool \fIDS:...\fP string) that is given to the \fIrrdtool create\fP command when first setting up the RRD database
for this variable. For further information on specifying the data-source string, see the documentation for 
\fIrrdcreate(1)\fP.  The third (and following) elements give one or more round-robin archive specifiers 
(rrdtool \fIRRA:...\fP strings), also given to the \fIrrdtool create\fP command when first setting up the RRD database 
for this variable. For further information on specifying the \fIRRA\fP strings, see the documentation for \fIrrdcreate(1)\fP. 
.IP rrdfile_pattern
This parameter specifies, in the style of the \fItrwfname(3)\fP function, the way to construct the names of rrd cache 
files in which to save collected data points. 
.IP rrdtool
This parameter gives the name of the \fIrrdtool\fP executable to invoke. If \fIrrdtool\fP is on the execution 
path, the value of this parameter may be simply \fIrrdtool\fP. Alternatively, an absolute path to the 
\fIrrdtool\fP executable may be given. 
.IP status_stepsize_sec
This parameter specifies the base interval in seconds at which data will be fed into the RRD database. This value 
is given as the \fI--step\fP argument to the \fIrrdtool create\fP command. For further explanation, see the \fIrrdtool(1)\fP 
documentation. 
.IP suppress_egrep
If this string parameter is not empty, \fBorb2rrdc\fP uses it as an \fIegrep(1)\fP expression, passing the output of
\fIrrdtool\fP through the \fIegrep(1)\fP command with the \fI-v\fP option to filter out all lines matching the pattern.
(This parameter will have no effect if the \fIegrep(1)\fP command is not present on the execution path). 

.SS "Parameter File Example"

.nf

rrdtool         rrdtool

# Convenient parameter-file macros:
# --------------------------------

status_heartbeat_sec 40		# status_stepsize_sec * 2

archives	RRA:AVERAGE:0.5:&status_stepsize_sec:1200 RRA:MAX:0.5:60:700

# Actual orb2rrdc parameters:
# --------------------------

rrdfile_pattern	rrd/%{net}_%{sta}_%{rrdvar}.rrd

status_stepsize_sec	20		# e.g. use statusreport_interval from q3302orb.pf

default_network &ref(site,default_seed_network)

suppress_OK 	0

dls_vars	&Tbl{
br24   GAUGE:&status_heartbeat_sec:U:U   &archives
lcq    GAUGE:&status_heartbeat_sec:U:U   &archives
}

.fi
.SH EXAMPLE
.in 2c
.ft CW
.nf
% orb2rrdc -v -s state/orb2rrdc anfops.ucsd.edu:usarray db/rrdcache
.fi
.ft R
.in
.SH "SEE ALSO"
.nf
rrdtool(1)
.fi
.SH "BUGS AND CAVEATS"
orb2rrdc will only compile and run if Tobias Oetiker's rrdtool(1) is
installed, currently available from 
.nf

	http://people.ee.ethz.ch/oetiker/webtools/rrdtool/

.fi

Currently orb2rrdc is designed to handle q3302orb .*/pf/st status packets. 
If given a regular expression match for orb packets that include waveform
data, orb2rrdc will actually also save RRD databases of waveform 
data (via the \fIchan_vars\fP parameter-file array, similar to \fIdls_vars\fP), however this is not advised for seismic waveform data proper due to the 
built-in averaging and the limitation to one-second or greater time steps. 

It might be nice to have a regular-expression limiting the stations which 
are chosen out of the status packets. This can be added if necessary.

The orb2rrdc name is temporary until the newly written version has proven itself. 

The rrdtool parameter-file value must either be the literal string \fIrrdtool\fP 
or an absolute path to the \fIrrdtool\fP executable. 

\fBorb2rrdc\fP will translate the string field \fIopt\fP, if present in the input 
parameter file, into the five fields \fIacok\fP, \fIapi\fP, \fIisp1\fP, \fIisp2\fP, 
and \fIti\fP. If any of those string fields are present in the value of \fIopt\fP, 
the corresponding added parameter will be assigned a value of 1. If \fIopt\fP is present 
and non-null but does not contain the name of the new parameter, the newly added 
parameter will be assigned a value of 0. If \fIopt\fP is missing or null ("-") for 
a given station in an input parameter file, these five new parameters will be set to 
"-". 

When using the \fI-d\fP option, \fBorb2rrdc\fP assumes the rrdcached(1) daemon has been 
separately started and is already running. For example, rrdcached(1) might be started 
under rtexec(1) with something like
.nf

	rrdcached -F -g -l unix:/home/rt/rrdcached.sock

.fi
In that case, orb2rrdc would be started with the option \fI-d unix:/home/rt/rrdcached.sock\fP.

At this time, rrdtool updates appear to experience problems if the rrdcached is restarted 
and the rrdtool server launched by orb2rrdc is not restarted (the solution being to restart
\fBorb2rrdc\fP also if rrdcached is restarted).

\fBorb2rrdc\fP deliberately does not send \fIcreate\fP commands through the rrdcached daemon, since 
at the time of writing the daemon does not support them. 

The \fI-f\fP and \fI-s\fP options provide potentially conflicting messages. Thus, if both are given, 
the \fI-f\fP option is ignored. In principle, one could allow both options to be specified, acting on the 
\fI-f\fP option if and only if a state file were specified  but not present. That would allow the user 
to rewind to a given point to start catching up, then continue on once caught up without a restart. This 
has not been implemented, however. 

\fBorb2rrdc\fP currently ignores values of \fI-\fP in input parameter files from the orbserver, since those 
cannot be added as floating-point values to round-robin databases. Alternatively, \fBorb2rrdc\fP could 
add \fIU\fP i.e. "UNKNOWN" values to the round-robin databases, however this also has not been implemented.

The \fIsuppress_egrep\fP capability filters out only output from \fIrrdtool\fP. It will not suppress any 
messages that come directly from \fBorb2rrdc\fP itself. Some understanding of \fIrrdtool\fP is thus necessary to 
use this feature successfully. 

.SH AUTHOR
.nf
Kent Lindquist
Lindquist Consulting, Inc. 
.fi
.\" $Id$
