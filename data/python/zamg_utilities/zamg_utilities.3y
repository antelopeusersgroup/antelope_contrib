.TH PYTHON_PJ 3Y
.SH NAME
init_statefile, update_statefile, rfc33392epoch, epoch2rfc3339, string_charsplit, utf8len, string_maxbytes, set_remark, add_remark, get_remark, mark_remar, create_dbdesc, spherical_distance, haversine_distance \- little helpers
.SH SYNOPSIS
.nf
sys.path.append(os.environ['ANTELOPE'] + "/contrib/data/python")

import zamg.utilities as zu
ts="2019-10-18T11:51:33.4Z"
epoch=zu.rfc33392epoch(ts)
print("epoch of %s is: %f" % (ts, epoch))


.fi
.SH DESCRIPTION
some utilities

.SH OPTIONS
.SS rfc33392epoch
convert internet timestamp to \fBnormal\fP epoch time
.SS timestamp = epoch2rfc3339(epoch)
convert \fBepoch\fP to internet timestamp
.SS lines = string_charsplit(string)
split input to pieces of maximal bytelen bytes while keeping individual characters unchanged.
Useful for wring unicode data to records of fixed length like e.g in the remark table.
.SS bytelen = utf8len(string)
length of encoded string in bytes
.SS substr = string_maxbytes(input, bytelen)
return at most \fBbytelen\fP bytes of encoded string.
Useful for avoiding half-written bytes
.SS commid = set_remark(dbt, remark)
Set or update remark for specified table and record. Really useful :-) !
.SS commid = add_remark(dbt, remark)
Add remark to specified table and record. This function splits the remark using
\fBstring_charsplit\fP to avoid broken chars. Sets (overwrites) commid in the specified record.
Previous remarks are left in the remark table but no longer associated to the specified record.
.SS remark = get_remark(dbt)
Retrieve remark for specified table and record in one line.
.SS mark_remark(dbt)
Mark (clear) remark for specified table and record. This function uses \fIdbmark\fP to mark specified remarks.
One should remove nullified records later by calling \fIdbcrunch(1)\fP.
.SS db = create_dbdesc(path, schema, table=NULL)
Return database and table, if specified. If necessary, create database descriptor with specified schema.
Mainly useful for non-default schemata.
.SS dist = spherical_distance(lat1,lon1, lat2, lon2, degrees=True)
return great-arc distance between 2 points. Input is in degrees, output is selectable.
.SS dist = haversine_distance(lat1,lon1, lat2, lon2, degrees=True)
return great-arc distance between 2 points, computed using the haversine formula. Input is in degrees, output unit can be selected.
.SS lastid, lasttime = init_statefile(statefilename)
read from existing statefile or prepare to use one. Returns id and time.
.SS update_statefile(statefilename, id, time)
update statefile with id and time.
.SH "SEE ALSO"
.nf
antelope_python(3y), epoch(3)
.fi
.SH "BUGS AND CAVEATS"
The conversion from rfc3339 is shamelessly stolen from Dannys USGS2orb
.SH AUTHOR
Nikolaus Horn
