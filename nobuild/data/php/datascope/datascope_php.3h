.TH DATASCOPE_PHP 3 "$Date$"
.SH NAME
Datascope_PHP \- Datascope interface for PHP
.SH SYNOPSIS
.nf

<?php
if( ! extension_loaded( "Datascope" ) ) {
	elog_die( "Module 'Datascope' is not loaded, unable to continue" );
}
?>

.fi
.SH DESCRIPTION

The Datascope interface for PHP is intended to
parallel the Perl interface to Datascope, documented in perldb(3P).
The man page on this PHP interface is written to express the interface
syntax in PHP. Almost all of these routines are merely wrappers around
identically-named C function calls. For further elaboration on the
concepts involved in each routine, please refer to the C man pages
for the underlying routines, which describe them in depth. 

These extensions must first be loaded with an \fIextension\fP directive
inside the \fIphp.ini\fP file:
.ft CW
.in 2c
.nf

extension=Datascope.so

.fi
.in
.ft R
.LP

The \fIphp.ini\fP file's \fIextension_dir\fP directive must also be set to 
point to $ANTELOPE/data/php (filling in the reference to $ANTELOPE explicitly,
of course, since the environment variable will not work inside \fIphp.ini\fP),
or the compiled \fIDatascope.so\fP file must be copied into the \fIextension_dir\fP
already specified in \fIphp.ini\fP by the local system administrator. 

.SS Datascope functions

The following functions have been implemented. Since these functions
are wrappers around the respective C function calls, the documentation
on the identically-named C routines may also be helpful.

.IP "\fBds_dbopen\fP ( database, permissions )"
Returns a database pointer to the specified database.
.ft CW
.in 2c
.nf

$db = ds_dbopen ( $database, 'r+' ) ;

.fi
.in
.ft R
.IP "\fBds_dbopen_database\fP ( database, permissions )"
Returns a database pointer to the specified database. Same as ds_dbopen
except it also understands a full table pathname, in which case the 
returned pointer will point to the opened table. 
.ft CW
.in 2c
.nf

$db = ds_dbopen_database ( $database, 'r+' ) ;

.fi
.in
.ft R
.IP "\fBds_dbopen_table\fP ( database, permissions )"
Returns a database pointer to the specified database table. A name of "-" 
reads from stdin. 
.ft CW
.in 2c
.nf

$db = ds_dbopen_table ( $database, 'r+' ) ;

.fi
.in
.ft R
.IP "\fBds_dbtmp\fP ( schema )"
Returns a database pointer to a temporary database of the specified schema
.ft CW
.in 2c
.nf

$db = ds_dbtmp ( 'rt1.0' ) ;

.fi
.in
.ft R
.IP "\fBds_dbcreate\fP ( filename [, schema [, dbpath [, description [, detail ]]]] )"
Create a database descriptor in the specified filename. 
.ft CW
.in 2c
.nf

$db = ds_dbcreate ( 'sample_database', 'rt1.0', 
		    'opt/antelope/data/db/demo/{demo}' ) ;

.fi
.in
.ft R
.IP "\fBdblookup\fP ( $db, database, table, field, record )"
Returns a database pointer for the specified database, table, field,
and record. The names should be specified as strings, or left
as empty strings to leave desired parts of the pointer untouched, where
possible).
.ft CW
.in 2c
.nf

$db = dblookup( $db, '', 'wfdisc', '', '' ) ;

.fi
.in
.ft R
.IP "\fBdbgetv\fP ( $db, field_name, [field_name, ...] )"
Returns the values of the specified fields for a particular record:
.ft CW
.in 2c
.nf
.ne 4

list( $sta, $chan, $time ) =
        dbgetv( $db, 'sta', 'chan', 'time' );

.fi
.in
.ft R
As an alternate method, \fBdbgetv\fP will take as its second argument
an array of strings with the field names to retrieve, returning as 
usual an array of values:
.ft CW
.in 2c
.nf

$myfields = array( "lat", "lon", "depth", "time" );
list( $lat, $lon, $depth, $time ) = dbgetv( $mydb, $myfields );

.fi
.in
.ft R

.IP "\fBpfget\fP ( pfname, key )"
Get the value for the named key in the parameter named pfname. pfget
takes either single parameter names, or extended-syntax names in the 
style of pfresolve(3). If the requested parameter is a parameter-file
table or array, the result is returned as a PHP array or associative-array, 
with nested structures where appropriate. If the key is left as the 
empty string, the entire parameter file is returned as a nested 
data structure. 

.nf

print pfget( "dbrecenteqs", "max_num_eqs" ) . "\\n";
print pfget( "dbrecenteqs", "other_region_links{Hawaii}" ) . "\\n";

print_r pfget( "dlmon", "" );

.fi
.in
.ft R
.IP "\fBpfget_boolean\fP ( pfname, key )"
Get the value for the named key in the parameter named pfname and interpret 
it as a boolean value, i.e. "no", "0", "false" return a value of 0; 
"yes", "1", "true" return a value of true (usually -1). 
.nf

print pfget_boolean( "trdefaults", "miniseed_sparc_order" ) . "\\n";

.fi
.in
.ft R
.IP "\fBpfupdate\fP ( pfname )"
Reread a parameter file if necessary, returning 1 if updated, 0 otherwise
.nf

$rc = pfupdate( "dbloc2" );

.fi
.in
.ft R
.IP "\fBpffiles\fP ( pfname [, all] )"
List the files which make up a parameter file object. If all is specified 
and nonzero, list all possible filenames, including non-existent files. 
.nf

$filelist = pffiles( "dbloc2" );

.fi
.in
.ft R
.IP "\fBpf2string\fP ( pfname )"
return a string representation of the parameter file object
.nf

$value = pf2string( "dbloc2" );

.fi
.in
.ft R
.IP "\fBpfrequire\fP ( pfname, atime )"
require pf_revision_time from last file pfname to be later than atime
.nf

$value = pfrequire( "dbloc2", "8/15/2003" );

.fi
.in
.ft R
.IP "\fBpfcompile\fP ( string, pfname )"
convert the specified string into a parameter file object
.nf

pfcompile( "date 8/15/2001\\nlabel Try", "testpf" );

.fi
.in
.ft R
.IP "\fBpfput\fP ( key, value, pfname )"
put the specified key/value pair into a parameter-file object. Values may be 
integer, double, boolean, string, indexed lists, or associative arrays. 
These values may be nested arbitrarily. 
.nf

pfput( "aninteger", 3, "teststuff" );

.fi
.in
.ft R
.IP "\fBpfdel\fP ( pfname, key )"
Remove the specified parameter from a parameter-file object and return the value 
.nf

echo pfdel( "teststuff", "aninteger" );

.fi
.in
.ft R
.IP "\fBpfwrite\fP ( filename, pfname )"
write out pf object to the specified file
.nf

pfwrite( "teststuff.pf", "testpf" );

.fi
.in
.ft R
.IP "\fBpf2xml\fP ( pfname [, flags [, prolog [, name]]] )"
Convert a parameter file to XML. The flags argument is a string which may be 
empty, or contain one or more of the strings PFXML_NEWLINES, PFXML_STRONG, 
PFXML_PRESERVE_PFFILE. These have the same effects as documented in 
pf2xml(3). 
.nf

echo pf2xml( "cron", 'PFXML_NEWLINES|PFXML_STRONG' );

.fi
.in
.ft R
.IP "\fBtrloadchan\fP ( $db, t0, t1, sta, chan )"
read channel waveform data into a trace database. The return value
is a database pointer to a trace table, which contains one row for 
each relevant segment of waveform data from the input table. The start 
and end-times t0 and t1 may be either double-precision values giving 
Unix epoch times, or strings interpretable by the str2epoch(3) command. 
.ft CW
.in 2c 
.nf

$tr = trloadchan( $db, $t0, $t1, $sta, $chan );

.fi
.in
.ft R
.IP "\fBtrsample\fP ( $db, t0, t1, sta, chan [, apply_calib] )"
Read channel waveform data from the specified table (usually wfdisc)
for the given time range, station, and channel name into a PHP array 
of time/value pairs (time for datapoint with index zero, value for datapoint 
with index zero, time for datapoint with index one, value for datapoint
with index one, etc.). The t0 and t1 arguments may be epoch times or
strings interpretable by str2epoch(3). If apply_calib is specified and 
nonzero, any existing non-zero calibration values will be applied to the 
data. Otherwise the raw counts will be returned. Note the possibility that 
the data for this station-channel may be incomplete for the given time 
window (consisting of several disjoint segments), in which case the timestamps
in the time,value pairs will not necessarily be contiguous.
.ft CW
.in 2c 
.nf

$apply_calib = 1;
$time_value_array = trsample( $db, $t0, $t1, $sta, $chan, $apply_calib );

.fi
.in
.ft R
.IP "\fBtrsamplebins\fP ( $db, t0, t1, sta, chan, binsize [, apply_calib] )"
This is similar to trsample, however an additional argument, binsize, 
specifies (as a number of samples) the size of bins into which to divide 
the time series. The returned array consists of successive triplets of 
epoch-time, minimum data value for the bin, maximum data value for the bin. 
As with trsample, the returned data may consist of several disjoint segments. 
Each segment is binned separately (bins will not extend across trace 
segments). If the number of samples in a trace segment is not evenly 
divided by the binsize, the last triplet for that segment will represent
the partially-filled end bin. See also the trdatabins command. 
.ft CW
.in 2c 
.nf

$binsize = 10;
$apply_calib = 1;
$time_value_array = trsample( $db, $t0, $t1, $sta, $chan, $binsize, $apply_calib );

.fi
.in
.ft R
.IP "\fBtrapply_calib\fP ( $tr )"
multiply waveform data in  trace  object by calib value
.ft CW
.in 2c 
.nf

trapply_calib( $tr );

.fi
.in
.ft R
.IP "\fBtrextract_data\fP ( $tr )"
extract an array of waveform data values from a single row of a 
trace-table.
.ft CW
.in 2c 
.nf

$rawdatapoints = trextract_data( $tr );

.fi
.in
.ft R
.IP "\fBtrdata\fP ( $tr [, $i0 [, $npts]] )"
read channel waveform data. Without the second and third arguments,
this function is identical to trextract_data(). The optional second 
argument $i0 gives the index of the first sample to be returned. Note that 
this argument is zero-offset, i.e. the first sample is number zero, the 
second available sample is number 1, etc. The third argument specifies 
the maximum number of points to return. It fewer are available, trdata() will
issue a warning and return as many applicable samples as are available. 
.ft CW
.in 2c 
.nf

$rawdatapoints = trdata( $tr, 0, 2000 );

.fi
.in
.ft R
.IP "\fBtrdatabins\fP ( $tr, $binsize [, $i0 [, $npts]] )"
This function is similar to trdata, however allows one extra argument, 
which gives a bin size in number of samples. Before being returned, 
the time series is divided into bins of the specified size. The returned 
array gives the minimum, then the maximum value in each bin. If the number 
of requested (or number of available) points is not an even multiple of 
the binsize, the last min and max value will represent the partially filled 
last bin. 
.ft CW
.in 2c 
.nf

$minmaxbins = trdatabins( $tr, 5, 0, 2000 );

.fi
.in
.ft R
.IP "\fBtrsplit\fP ( $tr )"
break up waveform records at marked bad data
.ft CW
.in 2c 
.nf

trsplit( $tr );

.fi
.in
.ft R
.IP "\fBtrsplice\fP ( $tr )"
splice together data segments (input trace-object must be 
pre-sorted by sta, chan, and time)
.ft CW
.in 2c 
.nf

trsplice( $tr );

.fi
.in
.ft R
.IP "\fBtrfilter\fP ( $tr, $filter )"
Filter data in-place according to the specified filter string, 
as documented in trfilter(3).
.ft CW
.in 2c 
.nf

$rc = trfilter( $tr, 'BW 1.0 4 5.0 4' );

.fi
.in
.ft R
.IP "\fBtrfree\fP ( $tr )"
free a trace-object pointer
.ft CW
.in 2c 
.nf

trfree( $tr );

.fi
.in
.ft R

.IP "\fBtrdestroy\fP ( $tr )"
destroy a trace-object pointer
.ft CW
.in 2c 
.nf

trdestroy( $tr );

.fi
.in
.ft R

.IP "\fBtrtime2samp\fP ( $time0, $samprate, $time1 )"
Find the sample index of a datapoint given its timestamp, plus the start-time
and sample rate of the time series
.ft CW
.in 2c 
.nf

$isamp = trtime2samp( $time0, $samprate, $time1 );

.fi
.in
.ft R
.IP "\fBtrsamp2time\fP ( $time0, $samprate, $isamp )"
Find the timestamp of a datapoint given its sample index (zero-offset), 
plus the start-time and sample rate of the time series
.ft CW
.in 2c 
.nf

$time1 = trsamp2time( $time0, $samprate, $isamp );

.fi
.in
.ft R
.IP "\fBtrsamprate\fP ( $time0, $nsamp, $endtime )"
Find the sample-rate of a time-series given its start-time, end-time, 
and number of samples. Note that the end-time is the exact timestamp 
of the very last data point that is actually present in the time-series. 
.ft CW
.in 2c 
.nf

$samprate = trsamprate( $time0, $nsamp, $endtime );

.fi
.in
.ft R
.IP "\fBtrnsamp\fP ( $time0, $samprate, $endtime )"
Find the number of samples in a time-series given the start-time, end-time, 
and sample rate. Note that the end-time is the exact timestamp 
of the very last data point that is actually present in the time-series. 
.ft CW
.in 2c 
.nf

$nsamp = trnsamp( $time0, $samprate, $endtime );

.fi
.in
.ft R
.IP "\fBtrendtime\fP ( $time0, $samprate, $nsamp )"
Find the end-time (the exact timestamp of the very last data point that
is actually present in the time-series) of a time-series given the start-time, 
the sample rate, and the number of samples. 
.ft CW
.in 2c 
.nf

$endtime = trendtime( $time0, $samprate, $nsamp );

.fi
.in
.ft R
.IP "\fBdb2xml\fP ( $db [, flags [, rootnode [, rownode [, fields [, expressions]]]]] )"
Return an eXtensible Markup Language (XML) representation of a datascope view via the db2xml(3) command. The flags argument may be empty or DBXML_PRIMARY, in
which case only the primary keys are returned.
.fi CW
.in 2c
.nf
.ne 4

$xml = db2xml( $db );

.fi
.in
.ft R
.IP "\fBdbex_eval\fP ( $db, expression )"
Evaluate an expression for a particular record.
.ft CW
.in 2c
.nf

$distance = dbex_eval ( $db,
            'distance( lat, lon, site.lat, site.lon )' ) ;

.fi
.in
.ft R
.IP "\fBdbextfile\fP( $db [, base-table] )"
return the filename for an external file for a particular record in
a view, for a particular base-table if specified.
.ft CW
.in 2c
.nf

$filename = dbextfile( $db ) ;

.fi
.in
.ft R
.IP "\fBdbcompile\fP( $db, string )"
dynamically add new attributes or relations to the schema
.ft CW
.in 2c
.nf

$rc = dbcompile( $db, $schema_addition ) ;

.fi
.in
.ft R
.IP "\fBdbnextid\fP( $db, id_name )"
get the next free id value for the specified id_name
.ft CW
.in 2c
.nf

$orid = dbnextid( $db, 'orid' ) ;

.fi
.in
.ft R
.IP "\fBdbfind\fP ( $db, $expression, [, $first [, $reverse]] )"
Find the first record in the specified database that matches the 
given expression. The search starts from the record indicated by the
database pointer unless $first is specified, and proceeds 
forwards unless $reverse is given as non-zero.
.ft CW
.in 2c
.nf

$record = dbfind( $db, "sta == \\"PFO\\"" ) ;
$db[3] = $record;

.fi
.in
.ft R
.IP "\fBdbmatches\fP ( $dbk, $dbt, $hookname [, join-keys] )"
Find records in the table $dbt which match the primary keys [or specified 
join-keys] of the single record in $dbk. A string $hookname should be 
given which uniquely identifies this combination of tables and keys. 
The return value is a list of the record numbers for the matching records. 
.ft CW
.in 2c
.nf

$dbk = dblookup( $db, "", "wfdisc", "", "dbSCRATCH" );
$dbt = dblookup( $db, "", "wfdisc", "", "" );

dbputv( $dbk, 'sta', 'TKM' );

$recs = dbmatches( $dbk, $dbt, 'station_hook', 'sta' );

print_r( $recs );

.fi
.in
.ft R
.IP "\fBdbaddv\fP ( $db, field_name, value, [field_name, value, ...] )"
Add a new record with the specified values to the database.
New records are checked to insure the keys are filled out and don't
conflict with other records in the table.
If the id key in a defining table (orid in the origin table, for example)
is not specified, a new id is automatically generated, using dbnextid.
.ft CW
.in 2c
.nf

.ne 6

$new = dbaddv( $dbevent, 'evid', 1,
            'evname', 'fake',
            'prefor', 1,
            'auth', 'danq' ) ;

.fi
.in
.ft R
.IP "\fBdbaddnull\fP ( $db )"
Add a null record to the specified table, returning the record number 
of the added row.
.ft CW
.in 2c
.nf
.ne 3

$recno =  dbaddnull( $db );

.fi
.in
.ft R
.IP "\fBdbputv\fP ( $db, field_name, value, [field_name, value, ...] )"
Change the fields for an existing record to the specified values.
.ft CW
.in 2c
.nf

.ne 6

dbputv( $dbevent, 'evid', 1,
                  'evname', 'fake',
                  'prefor', 1,
                  'auth', 'danq' ) ;

.fi
.in
.ft R
.IP "\fBdbadd\fP ( $db [, record] )"
Add a record from the scratch record, or from the specified string
.ft CW
.in 2c
.nf

$recno = dbadd( $db ) ;

.fi
.in
.ft R
.IP "\fBdbput\fP ( $db [, record] )"
Copy from scratch row [or from string] to specified field or row. Note that 
for almost all common database operations, the routine to use is dbputv() 
rather than dbput().
.ft CW
.in 2c
.nf

$rc = dbput( $db ) ;

.fi
.in
.ft R
.IP "\fBdbget\fP ( $db [, 0] )"
Return [or copy to the scratch row] the specified field or row. Note that 
for almost all common database operations, the routine to use is dbgetv() 
rather than dbget().
.ft CW
.in 2c
.nf

$record = dbget( $db ) ;

.fi
.in
.ft R
.IP "\fBdbadd_remark\fP ( $db, remark )"
add comment in remark table for row $db
.ft CW
.in 2c
.nf

dbadd_remark( $db, 'some comment' );

.fi
.in
.ft R
.IP "\fBdbget_remark\fP ( $db )"
get any comment from remark table for row $db
.ft CW
.in 2c
.nf

echo dbget_remark( $db );

.fi
.in
.ft R
.IP "\fBdbnojoin\fP ( $db1, $db2, [join-keys] )"
returns a new view with all rows of db1 that don't join to db2, using the join-keys 
if specified
.ft CW
.in 2c
.nf

$db = dbnojoin ( $dborigin, $dbassoc ) ;

.fi
.in
.ft R
.IP "\fBdbsort\fP ( $db [, -r][, -u][, key, ...] )"
sort the input table according to the specified keys
.ft CW
.in 2c
.nf

$db = dbsort ( $dbwfdisc, 'sta', 'chan' ) ;

.fi
.in
.ft R
.IP "\fBdbgroup\fP ( $db, key [, key, ...] )"
group the pre-sorted input table according to the specified keys
.ft CW
.in 2c
.nf

$db = dbsort ( $dbwfdisc, 'sta', 'chan' ) ;
$db = dbgroup ( $dbwfdisc, 'sta', 'chan' ) ;

.fi
.in
.ft R
.IP "\fBdbungroup\fP ( $db )"
separate a grouped view into its component rows
.ft CW
.in 2c
.nf

$db = dbungroup ( $db );

.fi
.in
.ft R
.IP "\fBdbjoin\fP ( $db1, $db2, [join-keys] )"
returns a new view which joins the two input views, using the join-keys 
if specified. If one of the join-keys is "\-outer", the view created 
is an outer-join. 
.ft CW
.in 2c
.nf

$db = dbjoin ( $dborigin, $dbassoc ) ;

.fi
.in
.ft R
.IP "\fBdbtheta\fP ( $db1, $db2, [expression] )"
returns a new view with all combinations of rows, limited to those satisfying
expression if specified
.ft CW
.in 2c
.nf

$db = dbtheta ( $dborigin, $dbsite ) ;

.fi
.in
.ft R
.IP "\fBdbsubset\fP ( $db, expression )"
returns a new view which is the set of all row which satisfy the expression
.ft CW
.in 2c
.nf

$dbsubsetted = dbsubset ( $dbwfdisc, 'sta=="AAK"' ) ;

.fi
.in
.ft R
.IP "\fBdbbase\fP ( $db, tablename )"
returns a new view which points to the row of the tablename base-table 
corresponding to the specified row in the input view:
.ft CW
.in 2c
.nf

$dbbaserow = dbbase ( $dbsomeview, "origin" ) ;

.fi
.in
.ft R
.IP "\fBdblist2subset\fP ( $db [, list] )"
returns a new view which is the set of all rows with indices specified 
in the list (the list should be an array of integers). If no list is specified,
the input view is assumed to be a "bundle" database pointer, indicating 
a range of records, in which case the new view contains the referenced 
records.
.ft CW
.in 2c
.nf

$dbsubsetted = dblist2subset ( $db, array( 1, 4, 6 ) );

.fi
.in
.ft R
.IP "\fBdbget_range\fP ( $db )"
This function assumes that the database pointer represents a range of records, 
and returns the endpoints of the range as a two-element list. The first 
element gives the index of the first record in the range. The second element
gives a number one greater than the index of the last record in the range
(this facilitates use of the results in a standard loop):
.ft CW
.in 2c
.nf

list( $first, $last ) = dbget_range ( $db );

$db[2] = dbALL;

for( $db[3] = $first; $db[3] < $last; $db[3]++ ) {

	// Do something with specified row of $dborig
}

.fi
.in
.ft R
.IP "\fBdbseparate\fP ( $db, table )"
return a new view which consists of all the rows of the specified table 
which participate in the joined view $db
.ft CW
.in 2c
.nf

$dboriginsubset = dbseparate ( $db, 'origin' ) ;

.fi
.in
.ft R
.IP "\fBdbsever\fP ( $db, table )"
return a new view which consists of all the unique rows left 
after removing the specified table from the input view
.ft CW
.in 2c
.nf

$dbwithoutorigin = dbsever ( $db, 'origin' ) ;

.fi
.in
.ft R
.IP "\fBdbunjoin\fP ( $db, database )"
create a new database, containing all the records referenced 
in the input view
.ft CW
.in 2c
.nf

dbunjoin ( $db, '/tmp/testdb' ) ;

.fi
.in
.ft R
.IP "\fBdbprocess\fP ( $db, cmd1, cmd2, cmd3 ... )"
returns a new view which is the result of applying the dbprocess
commands cmd1, cmd2, etc to the input database pointer. The 
commands
themselves are interpreted by the dbprocess(3) C\-callable API function. For details 
on what commands can be specified to dbprocess and what their syntax 
is, see the man-page for
 dbprocess(3). 
.ft CW
.in 2c
.nf

$dbprocess = dbprocess ( $db, 'dbopen wfdisc',
                              'dbjoin site',
                              'dbsubset distance(38,-104,lat,lon)<15') ;

.fi
.in
.ft R
.IP "\fBdbquery\fP ( $db, code )"
Query the database for information. The standard Datascope codes must
be in quotes.
.ft CW
.in 2c
.nf

.ne 6

$nrecords =  dbquery( $db, 'dbRECORD_COUNT' ) ;
$description = dbquery( $db, 'dbTABLE_DESCRIPTION' ) ;
$detail = dbquery( $db, 'dbTABLE_DETAIL' ) ;
$ntables = dbquery( $db, 'dbTABLE_COUNT' ) ;

.fi
.in
.ft R
.IP "\fBdbnrecs\fP ( $db )"
Return the number of records in a table or view. This function is
shorthand for dbquery( $db, 'dbRECORD_COUNT' );
.ft CW
.in 2c
.nf
.ne 3

$nrecords =  dbnrecs( $db );

.fi
.in
.ft R
.IP "\fBds_dbclose\fP ( $db )"
Close a Datascope database
.ft CW
.in 2c
.nf

ds_dbclose ( $db );

.fi
.in
.ft R
.IP "\fBdbfree\fP ( $db )"
Free Datascope memory
.ft CW
.in 2c
.nf

dbfree ( $db );

.fi
.in
.ft R
.IP "\fBdbdestroy\fP ( $db )"
Destroy all tables of a Datascope database
.ft CW
.in 2c
.nf

dbdestroy ( $db );

.fi
.in
.ft R
.IP "\fBdbinvalid\fP ()"
return a database pointer of dbINVALID
.ft CW
.in 2c
.nf

$db = dbinvalid ( );

.fi
.in
.ft R
.IP "\fBdbstrtype\fP ($db, string)"
classifies string, returning "strREAL", "strINTEGER", "strNULL", 
"strSTRING" , "strTIME", "strFIELD", or "strUNKNOWN"
.ft CW
.in 2c
.nf

$type =  dbstrtype ( $db, $value );

.fi
.in
.ft R
.IP "\fBdbtruncate\fP ( $db, $nrecords )"
Truncate a database table to the specified number of records
.ft CW
.in 2c
.nf

dbtruncate ( $db, $nrecords ) ;

.fi
.in
.ft R
.IP "\fBdbresponse\fP ( $filename )"
Returns a PHP resource for a response object, representing the 
instrument response curve defined in $filename. This resource 
may be subsequently queried with \fBeval_response\fP.
.ft CW
.in 2c
.nf

$response = dbresponse( $filename ) ;

.fi
.in
.ft R
.IP "\fBeval_response\fP ( $response, $omega )"
Evaluates a response object at the specified angular frequency, 
returning the real and imaginary components of the response
.ft CW
.in 2c
.nf

$pi = 3.1415;
$f_hz = 5; 

$cx = eval_response( $response, 2 * $pi * $f_hz );

$real = $cx[0];
$imag = $cx[1];

.fi
.in
.ft R

.IP "\fBstrtdelta\fP ( $epoch )"
Convert an elapsed time in seconds to a string representation
.ft CW
.in 2c
.nf

$elapsed = strtdelta ( $epoch );

.fi
.in
.ft R

.IP "\fBstrtime\fP ( $epoch )"
Convert an epoch time in seconds to a string representation
.ft CW
.in 2c
.nf

$astring = strtime ( $epoch );

.fi
.in
.ft R

.IP "\fBstrydtime\fP ( $epoch )"
Convert an epoch time in seconds to a string representation
.ft CW
.in 2c
.nf

$astring = strydtime ( $epoch );

.fi
.in
.ft R

.IP "\fBstrdate\fP ( $epoch )"
Convert an epoch time in seconds to a string representation
.ft CW
.in 2c
.nf

$astring = strdate ( $epoch );

.fi
.in
.ft R

.IP "\fBstrlocaltime\fP ( $epoch )"
Convert an epoch time in seconds to a string representation
.ft CW
.in 2c
.nf

$astring = strlocaltime ( $epoch );

.fi
.in
.ft R

.IP "\fBstrlocalydtime\fP ( $epoch )"
Convert an epoch time in seconds to a string representation
.ft CW
.in 2c
.nf

$astring = strlocalydtime ( $epoch );

.fi
.in
.ft R

.IP "\fBstrlocaldate\fP ( $epoch )"
Convert an epoch time in seconds to a string representation
.ft CW
.in 2c
.nf

$astring = strlocaldate ( $epoch );

.fi
.in
.ft R

.IP "\fBnow\fP ( void )"
Return the current system time as a unix epoch time
.ft CW
.in 2c
.nf

$current_epoch = now();

.fi
.in
.ft R

.IP "\fBis_epoch_string\fP ( $timestring )"
return the epoch-time equivalent if the $timestring is interpretable
as a time (as specified by str2epoch(3)), or an empty result if not. 
.ft CW
.in 2c
.nf

$teststring = 'January 28, 2005 14:57 pm';

$epoch = is_epoch_string( $teststring );

.fi
.in
.ft R

.IP "\fBepoch2str\fP ( $epoch, $format [, $timezone] )"
Convert the given epoch time to a string value, as specified by the 
format string $format. The structure of this format string is explained
in the man-page epoch2str(3). If no timezone is given, UTC is assumed. 
An empty string will be interpreted as a local time-zone. The time-zones 
are specified as in a standard Unix system (for example, with names 
relative to /usr/share/lib/zoneinfo on a standard Solaris 2.8 system).
.ft CW
.in 2c
.nf

$timestring = epoch2str( now(), "%D %T %Z", "US/Eastern" );

.fi
.in
.ft R

.IP "\fBstr2epoch\fP ( $timestring )"
Convert a time-string conforming to str2epoch(3) into a Unix double-precision
epoch time. 
.ft CW
.in 2c
.nf

$teststring = 'January 28, 2005 14:57 pm';

$epoch = str2epoch( $teststring );

.fi
.in
.ft R

.IP "\fBepoch\fP ( $yearday )"
Convert an integer yearday (YYYYJJJ, year and day-of-year) to an equivalent 
Unix epoch time.
.ft CW
.in 2c
.nf

$yearday = 1995012;
$time = epoch( $yearday );

.fi
.in
.ft R

.IP "\fByearday\fP ( $epoch )"
Convert a Unix epoch-time to an integer julian day (YYYYJJJ, year and 
day-of-year).
.ft CW
.in 2c
.nf

$yd_today = yearday( now() );

.fi
.in
.ft R

.IP "\fBdbwrite_view\fP ( $db, $filename )"
Save a database view to a file
.ft CW
.in 2c
.nf

	$db = ds_dbopen( "testdb", "r" );

	$db = dblookup( $db, "", "origin", "", "" );

	$db = dbprocess( $db, "dbsubset ml > 3" );

	dbwrite_view( $db, "testdb.precious" );

.fi
.in
.ft R

.IP "\fBdbread_view\fP ( $filename [, $viewname] )"
Read a database view from the given filename, optionally specifying the name for the view
.ft CW
.in 2c
.nf

	$db = dbread_view( "testdb.precious" );

.fi
.in
.ft R

.IP "\fBdbsave_view\fP ( $db )"
Save a database view as part of the database
.ft CW
.in 2c
.nf

	$db = ds_dbopen( "testdb", "r" );

	$db = dblookup( $db, "", "origin", "", "" );

	$db = dbprocess( $db, "dbsubset ml > 3" );

	dbsave_view( $db );

.fi
.in
.ft R

.IP "\fBdbdelete\fP ( $db )"
Delete a row from a database table
.ft CW
.in 2c
.nf

	$db = ds_dbopen( "testdb", "r" );

	$db = dblookup( $db, "", "origin", "orid", "645" );

	dbdelete( $db );

.fi
.in
.ft R

.IP "\fBdbmark\fP ( $db )"
Mark a row of a database table for deletion (set all fields to null)
.ft CW
.in 2c
.nf

	$db = ds_dbopen( "testdb", "r" );

	$db = dblookup( $db, "", "origin", "orid", "645" );

	dbmark( $db );

.fi
.in
.ft R

.IP "\fBdbcrunch\fP ( $db )"
Remove null (marked) rows from a database table
.ft CW
.in 2c
.nf

	$db = ds_dbopen( "testdb", "r" );

	$db = dblookup( $db, "", "origin", "orid", "645" );

	dbmark( $db );

	dbcrunch( $db );

.fi
.in
.ft R

.IP "\fByesno\fP ( $value )"
Return -1 for yes,ok,y,true,1,on,t; return 0 for no,n,false,0,off,f; return
1 otherwise
.ft CW
.in 2c
.nf

$is_true = yesno( $answer );

.fi
.in
.ft R
.IP "\fBmakedir\fP ( $filename )"
make the complete directory path
.ft CW
.in 2c
.nf

makedir( $filename );

.fi
.in
.ft R
.IP "\fBmake_pathdirs\fP ( $filename )"
Make the complete directory path, assuming the final element is a file
.ft CW
.in 2c
.nf

make_pathdirs( $filename );

.fi
.in
.ft R
.IP "\fBdatafile\fP ( $env, $file )"
Find the specified file by looking first at the environment variable, then along the path
.ft CW
.in 2c
.nf

$fullpath = datafile( $env, $file );

.fi
.in
.ft R
.IP "\fBdatapath\fP ( $env, $dir, $file, $suffix )"
Find the specified file by looking first at the environment variable, then along the path
.ft CW
.in 2c
.nf

$fullpath = datafile( $env, $dir, $file, $suffix );

.fi
.in
.ft R
.IP "\fBabspath\fP ( $file )"
Return the absolute path to the specified file
.ft CW
.in 2c
.nf

$path = abspath( $filename );

.fi
.in
.ft R
.IP "\fBrelpath\fP ( $from, $to )"
Return the relative path from directory $from to file $to
.ft CW
.in 2c
.nf

$path = relpath( $dir, $filename );

.fi
.in
.ft R
.IP "\fBcleanpath\fP ( $path [, $nolinks] )"
Normalize the input path, removing extra relative elements ('..' etc.).
If $nolinks is specified and non-zero, any symbolic links along 
the path will also be resolved. 
.ft CW
.in 2c
.nf

$path = cleanpath( $filename );

.fi
.in
.ft R
.IP "\fBconcatpaths\fP ( $a, $b )"
Properly concatenate the two paths $a and $b
.ft CW
.in 2c
.nf

$path = concatpaths( '/tmp', $filename );

.fi
.in
.ft R
.IP "\fBparsepath\fP ( $path )"
return the directory, file basename, and the suffix (if present) for the given path
.ft CW
.in 2c
.nf

list( $dir, $base, $suffix ) = parsepath( $filename );

.fi
.in
.ft R
.IP "\fBfinit_db\fP ( $db )"
.IP "\fBmap_autodrm_netsta\fP ( $anet, $fsta )"
.IP "\fBmap_autodrm_chanaux\fP ( $sta, $fchan, $aux )"
.IP "\fBautodrm_net\fP ( $sta )"
.IP "\fBautodrm_aux\fP ( $sta, $chan )"
.IP "\fBmap_seed_netsta\fP ( $snet, $fsta )"
.IP "\fBmap_seed_chanloc\fP ( $sta, $fchan, $loc )"
.IP "\fBseed_net\fP ( $sta )"
.IP "\fBseed_loc\fP ( $sta, $chan )"
These routines map from SEED or autodrm station-naming conventions
to CSS3.0 conventions, and vice-versa, based on the contents of a 
foreign-keys database initialized with the finit_db function. See 
foreign(3) for more detail. 
.ft CW
.in 2c
.nf


$sta = map_autodrm_netsta ( $anet, $fsta )"
$chan = map_autodrm_chanaux ( $sta, $fchan, $aux )"
( $anet, $fsta ) = autodrm_net ( $sta )"
( $fchan, $aux ) = autodrm_aux ( $sta, $chan )"
$sta = map_seed_netsta ( $snet, $fsta )"
$chan =  map_seed_chanloc ( $sta, $fchan, $loc )"
( $snet, $fsta ) = seed_net ( $sta )"
( $fchan, $loc ) = seed_loc ( $sta, $chan )"

.fi
.in
.ft R

.IP "\fBgrn\fP ( $lat, $lon )"
.IP "\fBgrname\fP ( $lat, $lon )"
.IP "\fBsrn\fP ( $lat, $lon )"
.IP "\fBsrname\fP ( $lat, $lon )"
These routines provide geographic and seismic region numbers 
based on geodetic location
.ft CW
.in 2c
.nf


$grn = grn( $lat, $lon );
$grname = grname( $lat, $lon );
$srn = srn( $lat, $lon );
$srname = srname( $lat, $lon );

.fi
.in
.ft R

.IP "\fBelog_init\fP ( $argc, $argv )"
Initialize Antelope error routines
.ft CW
.in 2c
.nf

$rc = elog_init( $_SERVER['argc'], $_SERVER['argv'] );

.fi
.in
.ft R

.IP "\fBelog_log\fP ( $msg )"
send a log message to the elog facility 
.ft CW
.in 2c
.nf

elog_log( "A For-the-record log message" );

.fi
.in
.ft R

.IP "\fBelog_debug\fP ( $msg )"
send a debug message to the elog facility 
.ft CW
.in 2c
.nf

elog_debug( "A Debugging message" );

.fi
.in
.ft R

.IP "\fBelog_notify\fP ( $msg )"
send a notification message to the elog facility 
.ft CW
.in 2c
.nf

elog_notify( "A notification message" );

.fi
.in
.ft R

.IP "\fBelog_alert\fP ( $msg )"
send an alert message to the elog facility 
.ft CW
.in 2c
.nf

elog_alert( "An alert message" );

.fi
.in
.ft R

.IP "\fBelog_complain\fP ( $msg )"
send a complain message to the elog facility 
.ft CW
.in 2c
.nf

elog_complain( "A complaint message" );

.fi
.in
.ft R

.IP "\fBelog_die\fP ( $msg )"
send a fatal message to the elog facility and exit 
.ft CW
.in 2c
.nf

elog_die( "A fatal error message" );

.fi
.in
.ft R

.IP "\fBelog_string\fP ( $n )"
return the error log starting with message n
.ft CW
.in 2c
.nf

echo elog_string( 0 );

.fi
.in
.ft R

.IP "\fBelog_clear\fP ()"
clear the elog message log
.ft CW
.in 2c
.nf

elog_clear();

.fi
.in
.ft R

.IP "\fBelog_mark\fP ()"
return the count of messages currently held in the error log
.ft CW
.in 2c
.nf

echo "Number of elog messages is " . elog_mark();

.fi
.in
.ft R

.IP "\fBelog_flush\fP ( $deliver, $first)"
eliminate log messages after $first, printing them if $deliver is set
.ft CW
.in 2c
.nf

elog_flush( 1, 0 );

.fi
.in
.ft R

.IP "\fBelog_callback\fP ( $replacement )"
replace standard elog processing with a PHP routine. The replacement 
routine must take two arguments, an integer severity code and a string 
for the contents of the error log, and return an integer. If the returned 
integer is nonzero, the error log is cleared after being called. 
.ft CW
.in 2c
.nf

function replacement( $severity, $log ) {


        $stderr = fopen( 'php://stderr', 'w' );
        fwrite( $stderr, "Handling a log message of severity $severity " . 
                         "and contents '$log'\\n" );
        fclose( $stderr );

        return 0;
}

elog_callback( 'replacement' );

elog_debug( "Some debugging message" );
.fi
.in
.ft R

.SS Datascope Constants

In addition to the above functions, the standard Datascope constants (see dbconstants(5))
such as dbALL, dbNULL, dbINVALID etc. have been implemented as PHP pre-defined constants. 
.SH EXAMPLE
.ft CW
.in 2c
.nf

.ne 16

#!/bin/sh
exec /usr/local/bin/php -f $0

<?php
if(!extension_loaded('Datascope')) {
        dl('Datascope.so');
}
$module = 'Datascope';
$functions = get_extension_funcs($module);
echo "Functions available in the test extension:<br>\\n";
foreach($functions as $func) {
    echo $func."<br>\\n";
}
echo "<br>\\n";

.ne 6
$mydb =ds_dbopen( "/opt/antelope/data/db/demo/demo", "r" );

$mydb = dbprocess( $mydb, "dbopen origin",
                          "dbsubset ml > 3" );
echo "table has ", dbnrecs( $mydb ),
     " records after subset\\n";

.ne 5
$mydb[3] = 0;
list( $lat, $lon, $ndef, $auth, $lddate ) =
    dbgetv( $mydb, "lat", "lon", "ndef", "auth", "lddate" );

echo "$lat, $lon, $ndef, $auth, $lddate\\n";

.ne 6
$moo = dbex_eval( $mydb, "lat + lon" );

echo var_dump( $moo ), "\\n";

$moo = dbquery( $mydb, "dbVIEW_TABLES" );
echo var_dump( $moo ), "\\n";

?>

.fi
.in
.ft R
.SH "SEE ALSO"
.nf
perldb(3P), orb_php(3H), sysinfo_php(3H)
.fi
.SH "BUGS AND CAVEATS"

Not all of the functions which should in principle take Datascope constants as arguments 
will actually do so, using the pre-defined numeric values. The user may have to use
string equivalents e.g. 'dbALL' in such cases. 
.SH AUTHOR
.nf
Kent Lindquist
Lindquist Consulting
.fi
.\" $Id$
